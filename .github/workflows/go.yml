# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go
#
# Note: If PR comments fail with "Resource not accessible by integration":
# 1. Go to Settings > Actions > General
# 2. Under "Workflow permissions", select "Read and write permissions"
# 3. Enable "Allow GitHub Actions to create and approve pull requests"

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read
  checks: write

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Build
      run: go build -v ./...

    - name: Test with Coverage
      run: |
        go test -v -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o=coverage.html

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      if: env.CODECOV_TOKEN != ''
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Coverage Badge
      uses: tj-actions/coverage-badge-go@v2
      if: github.ref == 'refs/heads/main'
      with:
        filename: coverage.out

    - name: Verify Changed files
      uses: tj-actions/verify-changed-files@v20
      if: github.ref == 'refs/heads/main'
      id: verify-changed-files
      with:
        files: README.md

    - name: Commit changes
      if: steps.verify-changed-files.outputs.files_changed == 'true' && github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "chore: Updated coverage badge."

    - name: Push changes
      if: steps.verify-changed-files.outputs.files_changed == 'true' && github.ref == 'refs/heads/main'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: main

    - name: Generate Coverage Report
      id: coverage
      run: |
        echo "## ðŸ“Š Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        COVERAGE=$(go tool cover -func=coverage.out | tail -1 | grep -o '[0-9]*\.[0-9]*%')
        echo "**Total coverage: $COVERAGE**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage Details" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        go tool cover -func=coverage.out >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        
    - name: Comment PR with Coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = '${{ steps.coverage.outputs.coverage }}';
          const body = `## ðŸ“Š Coverage Report

          **Total coverage: ${coverage}**

          View detailed coverage breakdown in the [Actions Summary](${context.payload.repository.html_url}/actions/runs/${context.runId}).

          <details>
          <summary>Coverage by Package</summary>

          \`\`\`
          ${require('child_process').execSync('go tool cover -func=coverage.out', {encoding: 'utf8'})}
          \`\`\`
          </details>`;

          // Check if we already commented on this PR
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('ðŸ“Š Coverage Report')
          );

          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
