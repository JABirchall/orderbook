# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go
#
# Note: If PR comments fail with "Resource not accessible by integration":
# 1. Go to Settings > Actions > General
# 2. Under "Workflow permissions", select "Read and write permissions"
# 3. Enable "Allow GitHub Actions to create and approve pull requests"

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Build
      run: go build -v ./...

    - name: Test with Coverage
      run: |
        go test -v -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o=coverage.html

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      if: env.CODECOV_TOKEN != ''
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Coverage Badge
      uses: tj-actions/coverage-badge-go@v2
      if: github.ref == 'refs/heads/main'
      with:
        filename: coverage.out

    - name: Verify Changed files
      uses: tj-actions/verify-changed-files@v20
      if: github.ref == 'refs/heads/main'
      id: verify-changed-files
      with:
        files: README.md

    - name: Commit changes
      if: steps.verify-changed-files.outputs.files_changed == 'true' && github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "chore: Updated coverage badge."

    - name: Push changes
      if: steps.verify-changed-files.outputs.files_changed == 'true' && github.ref == 'refs/heads/main'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: main

    - name: Generate Coverage Report
      if: github.event_name == 'pull_request'
      run: |
        echo "## ðŸ“Š Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        COVERAGE=$(go tool cover -func=coverage.out | tail -1 | grep -o '[0-9]*\.[0-9]*%')
        echo "**Total coverage: $COVERAGE**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage Details" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        go tool cover -func=coverage.out >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### How to Enable PR Comments" >> $GITHUB_STEP_SUMMARY
        echo "To enable automatic PR comments with coverage info:" >> $GITHUB_STEP_SUMMARY
        echo "1. Go to Settings â†’ Actions â†’ General" >> $GITHUB_STEP_SUMMARY
        echo "2. Under 'Workflow permissions', select 'Read and write permissions'" >> $GITHUB_STEP_SUMMARY
        echo "3. Enable 'Allow GitHub Actions to create and approve pull requests'" >> $GITHUB_STEP_SUMMARY
        
    # Temporarily disabled until repository permissions are configured
    # Uncomment the step below after setting up repository permissions as described in README
    # - name: Comment PR with Coverage
    #   if: github.event_name == 'pull_request'
    #   continue-on-error: true
    #   uses: actions/github-script@v7
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       try {
    #         console.log('Attempting to extract coverage...');
    #         const { execSync } = require('child_process');
    #         const output = execSync('go tool cover -func=coverage.out', { encoding: 'utf8' });
    #         const lines = output.trim().split('\n');
    #         const totalLine = lines[lines.length - 1];
    #         const match = totalLine.match(/(\d+\.\d+)%/);
    #         const coveragePercent = match ? match[1] + '%' : 'unknown';
    #         if (coveragePercent !== 'unknown') {
    #           const body = '## ðŸ“Š Coverage Report\n\nTotal coverage: **' + coveragePercent + '**\n\nGenerated by GitHub Actions';
    #           await github.rest.issues.createComment({
    #             issue_number: context.issue.number,
    #             owner: context.repo.owner,
    #             repo: context.repo.repo,
    #             body: body
    #           });
    #         }
    #       } catch (error) {
    #         console.log('Error in coverage comment script:', error.message);
    #       }
